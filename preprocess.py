# -*- coding: utf-8 -*-
"""preprocess_raw_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MDnadMnbzd9qB_sou6pyD5ltGx7IIibd

<h4>Import Libraries
"""

import numpy as np
import pandas as pd

"""<h4>Read Raw CSV Data"""

df = pd.read_csv("raw_data.csv",index_col=[0])

"""<h4> First 10 Rows from Raw Dataframe"""

df.head(10)

"""<h4>Define label encoder for Mac Adresses"""

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
label_encoder.fit_transform(df['address'])

"""<h4>Preprocess data"""

feature_all=[]
for j in range(list(df['measure ID'])[-1]):
    feature_list=[]
    each_measure=[]
    for i in df.index:
        if (j==df['measure ID'][i]):
            each_measure.append([df['signal'][i].astype(int),df['address'][i],df['channel'][i],df['arucoId'][i],df['x'][i],df['y'][i],df['z'][i]])
    each_measure.sort()
    signallist=[]
    chlist=[]
    idlist=[]
    for i in each_measure:
        signallist.append(i[0])
        chlist.append(i[2])
        idlist.append(i[1])
    feature_list.append(each_measure[0][0])
    feature_list.append(each_measure[-1][0])
    feature_list.append(len(np.unique(idlist)))
    feature_list.append(np.mean(signallist))
    feature_list.append(np.std(signallist))
    feature_list.append(each_measure[0][1])
    feature_list.append(each_measure[-1][1])
    feature_list.append(each_measure[0][2])
    feature_list.append(each_measure[-1][2])
    feature_list.append(len(np.unique(chlist)))
    feature_list.append(each_measure[0][-3])
    feature_list.append(each_measure[0][-2])
    feature_list.append(each_measure[0][-1])
    feature_all.append(feature_list)

numpy_array=np.array(feature_all)
numpy_array=numpy_array.T
df_feature=pd.DataFrame({
    'max_db':numpy_array[0],
    'min_db':numpy_array[1],
    'num_id':numpy_array[2],
    'mean':numpy_array[3],
    'std':numpy_array[4],
    'max_ch':numpy_array[7],
    'min_ch':numpy_array[8],
    'num_ch':numpy_array[9],
},dtype=np.float64)
df_feature.insert(loc=0,column="min_id",value=numpy_array[5])
df_feature.insert(loc=0,column="max_id",value=numpy_array[6])

for i in label_encoder.classes_:
    df_feature[i+"_bssid"]=np.zeros(1984,dtype=int)
    df_feature[i+"_signal"]=np.zeros(1984,dtype=int)

for i in df.index:
    df_feature[df["address"][i]+"_bssid"][df['measure ID'][i]]=1
    df_feature[df["address"][i]+"_signal"][df['measure ID'][i]]=df['signal'][i]

df_feature.insert(loc=len(df_feature.columns),column="x",value=numpy_array[10].astype("float64"))
df_feature.insert(loc=len(df_feature.columns),column="y",value=numpy_array[11].astype("float64"))
df_feature.insert(loc=len(df_feature.columns),column="z",value=numpy_array[12].astype("float64"))

df_feature.head()

len(df_feature)

conditions = [(df_feature['z']==0.0),
(df_feature['z']==4.0),
(df_feature['z']==8.0),
(df_feature['z']==11.6)
]
values = ['Base', 'Floor 1','Floor 2','Floor 3']
df_feature.insert(loc=len(df_feature.columns),column="Floor",value=np.select(conditions, values))
df_feature

for i in df_feature.index:
    if df_feature['Floor'][i] == '0':
        df_feature['Floor'][i] = 'Undefined'

"""<h4>Save Preprocessed data as data.csv"""

df_feature.to_csv("data.csv")

"""<h4> Encode Mac Addresses"""

encoded_var_dict = {}
for i in range(len(label_encoder.classes_)):
    encoded_var_dict.update({(label_encoder.classes_[i]+"_bssid"):str(i)+"_bssid"})
    encoded_var_dict.update({(label_encoder.classes_[i]+"_signal"):(str(i)+"_signal")})

df_feature.rename(columns=encoded_var_dict,inplace=True)
df_feature['max_id']=label_encoder.fit_transform(df_feature['max_id'])
df_feature['min_id']=label_encoder.fit_transform(df_feature['min_id'])

"""<h4>Save Preprocessed and Encoded Data as encoded_data.csv"""

df_feature.to_csv("encoded_data.csv")